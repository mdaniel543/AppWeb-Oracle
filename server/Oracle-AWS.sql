Create table Departamento(
    DepaID Number GENERATED BY DEFAULT AS IDENTITY,
    Nombre Varchar(55) NOT NULL,
    CapitalTotal float(4) NOT NULL,
    Capital_Disponible number(10),
    DepartamentoID Number,
    PRIMARY KEY (DepaID),
    FOREIGN KEY (DepartamentoID) REFERENCES Departamento(DepaID)
);

Create table Puesto(
    PuestoID Number GENERATED BY DEFAULT AS IDENTITY,
    Nombre Varchar(55) UNIQUE NOT NULL ,
    Salario float(4) NOT NULL,
    Imagen Varchar(200),
    PRIMARY KEY (PuestoID)
);

Create Table Depa_Puesto(
    Depa_Puesto_ID Number GENERATED BY DEFAULT AS IDENTITY,
    DepartamentoID Number,
    PuestoID Number,
    PRIMARY KEY (Depa_Puesto_ID),
    FOREIGN KEY (DepartamentoID) REFERENCES Departamento(DepaID),
    FOREIGN KEY (PuestoID) REFERENCES Puesto(PuestoID)
);

Create table Requisito(
    RequisitoID Number GENERATED BY DEFAULT AS IDENTITY,
    Nombre Varchar(55) NOT NULL,
    Tamanio Number,
    Obligatorio Char(1),
    PRIMARY KEY (RequisitoID)
);

Create Table Puesto_Requisito(
    Puesto_Requi_ID Number GENERATED BY DEFAULT AS IDENTITY,
    RequisitoID Number,
    PuestoID Number,
    PRIMARY KEY (Puesto_Requi_ID),
    FOREIGN KEY (RequisitoID) REFERENCES Requisito(RequisitoID),
    FOREIGN KEY (PuestoID) REFERENCES Puesto(PuestoID)
);

Create table Formato(
    FormatoID Number GENERATED BY DEFAULT AS IDENTITY,
    Nombre Varchar(55) UNIQUE NOT NULL,
    PRIMARY KEY (FormatoID)
);

Create Table Requisito_Formato(
    Requi_Forma_ID Number GENERATED BY DEFAULT AS IDENTITY,
    FormatoID Number,
    RequisitoID Number,
    PRIMARY KEY (Requi_Forma_ID),
    FOREIGN KEY (FormatoID) REFERENCES Formato(FormatoID),
    FOREIGN KEY (RequisitoID) REFERENCES Requisito(RequisitoID) 
);

Create Table Categoria(
    CategoriaID Number GENERATED BY DEFAULT AS IDENTITY,
    Nombre Varchar(45) UNIQUE NOT NULL,
    PRIMARY KEY(CategoriaID)
);

Create Table Puesto_Cate(
    Puesto_Cate_ID Number GENERATED BY DEFAULT AS IDENTITY,
    CategoriaID Number,
    PuestoID Number,
    PRIMARY KEY (Puesto_Cate_ID),
    FOREIGN KEY (CategoriaID) REFERENCES Categoria(CategoriaID),
    FOREIGN KEY (PuestoID) REFERENCES Puesto(PuestoID) 
);

CREATE Table Rol(
    RolID Number GENERATED BY DEFAULT AS IDENTITY,
    Nombre Varchar(45),
    PRIMARY KEY (RolID)
);

CREATE TABLE Personal (
    PersonalID Number GENERATED BY DEFAULT AS IDENTITY,
    Usuario Varchar(55) UNIQUE NOT NULL,
    Contrasenia Varchar(100) NOT NULL,
    Correo Varchar(100),
    Estado Char(1) NOT NULL,
    Fecha_Inicio DATE,
    Fecha_Fin DATE,
    RolID Number,
    DepartamentoID Number,
    PRIMARY KEY (PersonalID),
    FOREIGN KEY (RolID) REFERENCES Rol(RolID),
    FOREIGN KEY (DepartamentoID) REFERENCES Departamento(DepaID)
);

CREATE TABLE Aplicante (
    CUI Number PRIMARY KEY,
    Nombre Varchar(45) NOT NULL,
    Apellido Varchar(45) NOT NULL,
    Correo Varchar(100) NOT NULL,
    Direccion Varchar(65) NOT NULL,
    Telefono Number NOT NULL,
    CV Varchar(200) NOT NULL,
    Apto Char(1),
    Primera_Vez Char(1),
    Fecha_Postulacion DATE,
    Estado_Expediente Char(1),
    Planilla Char(1),
    Depa_Puesto_ID number,
    PersonalID number,
    FOREIGN KEY (Depa_Puesto_ID) REFERENCES Depa_Puesto(Depa_Puesto_ID),
    FOREIGN KEY (PersonalID) REFERENCES Personal(PersonalID)
);

CREATE TABLE login (
    Id Number GENERATED BY DEFAULT AS IDENTITY,
    Usuario Varchar(45) NOT NULL,
    Contrasenia Varchar(100) NOT NULL,
    RolID number NOT NULL,
    AplicanteCUI number UNIQUE,
    PRIMARY KEY (Id),
    FOREIGN KEY (AplicanteCUI) REFERENCES Aplicante(CUI),
    FOREIGN KEY (RolID) REFERENCES Rol(RolID)
);

CREATE TABLE Archivo(
    ArchivoID Number GENERATED BY DEFAULT AS IDENTITY,
    Ruta Varchar(200) NOT NULL,
    Aceptado Char(1),
    AplicanteCUI number, 
    Puesto_Requi_ID number,
    PRIMARY KEY (ArchivoID),
    FOREIGN KEY (Puesto_Requi_ID) REFERENCES Puesto_Requisito(Puesto_Requi_ID),
    FOREIGN KEY (AplicanteCUI) REFERENCES Aplicante(CUI)
);

CREATE TABLE Historial(
    HistorialID Number GENERATED BY DEFAULT AS IDENTITY,
    Ruta Varchar(200) NOT NULL, 
    Motivo Varchar(250) NOT NULL,
    Fecha_Rechazado DATE, 
    ArchivoID number, 
    PRIMARY KEY (HistorialID),
    FOREIGN KEY (ArchivoID) REFERENCES Archivo(ArchivoID);
);  


Insert Into Rol(Nombre) Values ('Admin Sistema');
Insert Into Rol(Nombre) Values ('Admin Usuario');

Insert Into login(Usuario, Contrasenia, RolID) Select 'as', 's', RolID From Rol Where Nombre = 'Admin Sistema';
Insert Into login(Usuario, Contrasenia, RolID) Select 'au', 'u', RolID From Rol Where Nombre = 'Admin Usuario';

Select Usuario, Contrasenia, Nombre From login l, Rol r Where l.RolID = r.RolID;
Select Nombre From login l Inner Join Rol r ON l.RolID = r.RolID Where l.Usuario = '' AND l.Contrasenia = '';

Insert Into Departamento(Nombre, CapitalTotal) Values ();
Insert Into Departamento(Nombre, CapitalTotal, DepartamentoID) Select '','', DepaID From Departamento Where Nombre = ;
--
Insert Into Puesto(Nombre, Salario) Select '','' From dual Where NOT EXISTS (Select * From Puesto Where Nombre = '' AND Salario = '')
Insert Into Puesto(Nombre, Salario, Imagen) Select '','','' From dual Where NOT EXISTS (Select * From Puesto Where Nombre = '' AND Salario = '')

Insert Into Depa_Puesto(DepartamentoID, PuestoID) Select DepaID, PuestoID From Departamento d, Puesto p, WHere d.Nombre = '' AND p.Nombre = '';

Insert Into Requisito(Nombre, Tamanio, Obligatorio) Select '','','' From dual WHere NOT EXISTS (Select * FROM Requisito Where Nombre = '' AND Tamanio = '' AND Obligatorio = '');

Insert Into Puesto_Requisito(RequisitoID, PuestoID) Select RequisitoID, PuestoID From Puesto p, Requisito r, WHERE  p.Nombre = '' AND r.Nombre = ''; 

Insert Into Formato(Nombre) Select '' From dual Where NOT EXISTS (Select * From Formato WHERE Nombre = '');

Insert Into Requisito_Formato(FormatoID, RequisitoID) Select FormatoID, RequisitoID From Formato f, Requisito r Where f.Nombre = '' AND r.Nombre = '';

Insert Into Categoria(Nombre) Select '' From dual Where NOT EXISTS (Select * From Categoria WHERE Nombre = '');

Insert Into Puesto_Cate(CategoriaID, PuestoID) Select CategoriaID, PuestoID FROM Categoria c, Puesto p Where c.Nombre = ''AND p.Nombre = '';


Select * From Departamento;
Select * From Puesto;
Select * From Depa_Puesto;
Select * From Requisito;
Select * From Puesto_Requisito;
Select * From Formato;
Select * From Requisito_Formato;
Select * From Categoria;
Select * From Puesto_Cate;

DELETE FROM Departamento CASCADE;
DELETE FROM Puesto CASCADE;
DELETE FROM Depa_Puesto CASCADE;
DELETE FROM Requisito CASCADE;
DELETE FROM Puesto_Requisito CASCADE;
DELETE FROM Formato CASCADE;
DELETE FROM Requisito_Formato CASCADE;
DELETE FROM Categoria CASCADE;
DELETE FROM Puesto_Cate CASCADE;
DELETE FROM Personal CASCADE;
DELETE FROM Aplicante CASCADE;
DELETE FROM login CASCADE;
DELETE FROM Archivo CASCADE;
DeLETE FROM Historial CASCADE;
DELETE FROM Rol CASCADE;

Select d.DepaID, p.PuestoID, d.Nombre, p.Nombre, p.Salario From Depa_Puesto dp Inner Join Departamento d ON d.DepaID = dp.DepartamentoID Inner Join Puesto p ON p.PuestoID = dp.PuestoID 
Select c.Nombre From Puesto_Cate pc Inner Join Puesto p ON p.PuestoID = pc.PuestoID AND p.Nombre = '' Inner Join Categoria c On C.CategoriaID = pc.CategoriaID;

Insert Into Rol(Nombre) Values ('Coordinador');
Insert Into Rol(Nombre) Values ('Reclutador');
Insert Into Rol(Nombre) Values ('Revisor');

Insert Into Personal(Usuario, Contraseña, Estado, Fecha_Inicio, RolID, DepartamentoID) Select '', '', '', DATE '', RolID, DepartamentoID FROM Rol r, Departamento d Where r.Nombre = '' AND d.Nombre = '';
Select PersonalID, Usuario, Contraseña, Estado, Fecha_Inicio, Fecha_Fin, r.Nombre, d.Nombre From Personal p Inner Join Rol r ON r.RolID = p.RolID Inner Join Departamento d ON d.DepaID = p.DepartamentoID;
Update Personal Set Usuario = '', Contraseña = '', RolID = (Select RolID From Rol WHERE Nombre = ''), DepartamentoID = (Select DepaID From Departamento WHERE Nombre = '') WHERE PersonalID = '';   
Update Personal Set Estado = '', Fecha_Fin = DATE '' WHERE PersonalID = '';   

Select p.PersonalID, Count(*) FROM Personal p Inner Join Departamento d ON d.DepaID = p.DepartamentoID AND d.Nombre = "" Inner Join Rol r On r.RolID = p.RolID AND r.Nombre = 'Coordinador' WHERE Estado = '1' GROUP BY p.PersonalID;
Select Nombre From Departamento;
Select Nombre From Categoria;

Insert Into Aplicante(CUI, Nombre, Apellido, Correo, Direccion, Telefono, CV, Apto, Fecha_Postulacion, Estado_Expediente, Planilla, Depa_Puesto_ID, PersonalID) Select :cui, :nombre, :apellido, :correo, :direccion, :telefono, :cv, '0', :postu, '0', '2', Depa_Puesto_ID, :revisor FROM Depa_Puesto WHERE DepartamentoID = :depa AND PuestoID = :puesto;

SELECT    n.id, n.us, n.correo, NVL(Conteo, 0) as nv
FROM      (Select ap.personalID AS id, count(*) as Conteo from Aplicante ap GROUP BY ap.PersonalID) rn
RIGHT JOIN (Select p.PersonalID as id, p.usuario as us, p.Correo as correo FROM Personal p Inner Join Departamento d ON d.DepaID = p.DepartamentoID AND d.DepaID = :depa Inner Join Rol r ON r.RolID = p.RolID AND r.Nombre = 'Revisor') n ON n.id = rn.id Group BY n.id, n.us, n.correo, rn.id  ORDER BY Conteo ASC FETCH NEXT 1 ROWS ONLY;

Select * From Puesto p WHERE p.Nombre = :puesto;
Select * From Puesto p WHERE p.Salario >= :salario;
Select * From Departamento d WHere d.Nombre = :depa;
Select * From Categoria c Where c.Nombre = :categoria;

Select d.Nombre, p.Nombre, p.salario, p.imagen, d.DepaID, p.PuestoID From Depa_Puesto dp Inner Join Departamento d ON d.DepaID = dp.DepartamentoID Inner Join Puesto p ON p.PuestoID = dp.PuestoID Inner Join Puesto_Cate pc ON pc.PuestoID = p.PuestoID Inner Join Categoria c ON c.CategoriaID = pc.CategoriaID 
WHERE (p.nombre = :puesto OR :puesto is null) AND (p.Salario >= :salario OR :salario is null) AND (d.Nombre = :depa OR :depa is null) AND (c.Nombre = :categoria OR :categoria is null);

Select c.Nombre From Puesto_Cate pc Inner Join Puesto p ON p.PuestoID = pc.PuestoID AND p.Nombre = '' Inner Join Categoria c On C.CategoriaID = pc.CategoriaID;

Select PersonalID, Usuario, Contraseña, Estado, TO_CHAR(Fecha_Inicio, 'DD/MM/YYYY' ) Fecha_Inicio, TO_CHAR(Fecha_Fin, 'DD/MM/YYYY' ) Fecha_Fin, r.Nombre, d.Nombre, Correo From Personal p Inner Join Rol r ON r.RolID = p.RolID Inner Join Departamento d ON d.DepaID = p.DepartamentoID WHERE (p.Usuario = :usuario OR :usuario is null) AND (p.Estado = :estado OR :estado is null) AND (p.Fecha_Inicio = TO_DATE(:incio, 'YYYY-MM-DD') OR :inicio is null) AND (p.Fecha_Fin = TO_DATE(:final, 'YYYY-MM-DD') OR :final is null) AND (r.Nombre = :rol OR :rol is null);

Select r.Nombre, p.PersonalID From Personal p Inner Join Rol r ON r.RolID p.RolID AND Where Usuario = :usuario AND Contrasenia = :pass; 

Select d.DepaID FROM Personal p Inner JOin Departamento d ON d.DepaID = p.DepartamentoID Where p.PersonalID = :per;

Select p.Nombre From Puesto p Inner Join Depa_Puesto dp ON dp.PuestoID = p.PuestoID Inner Join Departamento d ON d.DepaID = dp.DepartamentoID AND d.DepaID = :depa ;

Select ap.Nombre, p.Nombre, TO_CHAR(Fecha_Postulacion, 'DD/MM/YYYY' ) Fecha_Postulacion, ap.CUI, ap.Apellido, ap.Correo, ap.Direccion, ap.Telefono, ap.CV, ap.Apto From Aplicante ap Inner Join Depa_Puesto dp On dp.Depa_Puesto_ID = ap.Depa_Puesto_ID Inner Join Puesto p ON p.PuestoID = dp.PuestoID Inner Join Departamento d ON d.DepaID = dp.DepartamentoID AND d.DepaID = :depa;

Update Aplicante SET Apto = :apto WHERE CUI = :cui;

Select ap.Nombre, p.Nombre, TO_CHAR(Fecha_Postulacion, 'DD/MM/YYYY' ) Fecha_Postulacion, ap.CUI, ap.Apellido, ap.Correo, ap.Direccion, ap.Telefono, ap.CV, ap.Apto From Aplicante ap Inner Join Depa_Puesto dp On dp.Depa_Puesto_ID = ap.Depa_Puesto_ID Inner Join Puesto p ON p.PuestoID = dp.PuestoID Inner Join Departamento d ON d.DepaID = dp.DepartamentoID AND d.DepaID = :depa WHERE (ap.Nombre = :nombre OR :nombre is null) AND (ap.Fecha_Postulacion = TO_DATE(:fecha, 'YYYY-MM-DD') OR :fecha is null) AND (p.Nombre = :puesto OR :puesto is null);

Insert Into Rol(Nombre) Values ('Aplicante');

Insert Into login(Usuario, Contrasenia, RolID, AplicanteCUI) Select :usuario, :pass, RolID, :usuario From Rol Where Nombre = 'Aplicante';

Select ap.Nombre, TO_CHAR(Fecha_Postulacion, 'DD/MM/YYYY' ) Fecha_Postulacion, ap.Apellido, ap.Correo, ap.Direccion, ap.Telefono, ap.CV, ap.Primera_Vez, dp.DepartamentoID, dp.PuestoID, p.Nombre From Aplicante ap Inner Join Depa_Puesto dp ON ap.Depa_Puesto_ID = dp.Depa_Puesto_ID Inner Join Puesto p ON p.PuestoID = dp.PuestoID WHERE ap.CUI = :cui;

Select pr.puesto_requi_id, r.requisitoid, r.nombre, r.tamanio, r.obligatorio From Puesto_Requisito pr Inner Join Puesto p On p.PuestoID = pr.PuestoID Inner Join Requisito r ON r.RequisitoID = pr.RequisitoID WHERE p.PuestoID = :puesto

Select rf.Requi_Forma_ID, f.FormatoID, f.Nombre From Requisito_Formato rf Inner Join Formato f ON f.FormatoID = rf.FormatoID Inner Join Requisito r ON r.RequisitoID = rf.RequisitoID AND r.RequisitoID = :requisito;

Update Aplicante SET Nombre = :nombre, Apellido = :apellido, Correo = :correo, Direccion = :direccion, Telefono = :telefono, CV = NVL(:cv, CV) WHERE CUI = :cui

Insert Archivo(Ruta, Aceptado, AplicanteCUI, Puesto_Requi_ID) VALUES (:ruta, '2', :cui, :prid);

Select a.ArchivoID, a.ruta, a.Aceptado, r.nombre From Archivo a Inner Join Aplicante ap ON ap.CUI = a.AplicanteCUI Inner Join Puesto_Requisito pr ON pr.Puesto_Requi_ID = a.Puesto_Requi_ID Inner Join Requisito r ON r.RequisitoID = pr.RequisitoID WHERE a.AplicanteCUI = :cui;

UPDATE Aplicante SET Primera_Vez = '0' WHERE CUI = :cui;

Select * FROM Archivo;
SELECT * FROM APLICANTE;

Alter Table Archivo Drop (motivo, rechazado);

CREATE TABLE Historial(
    HistorialID Number GENERATED BY DEFAULT AS IDENTITY,
    Ruta Varchar(200) NOT NULL, 
    Motivo Varchar(250) NOT NULL,
    Fecha_Rechazado DATE, 
    ArchivoID number, 
    PRIMARY KEY (HistorialID),
    FOREIGN KEY (ArchivoID) REFERENCES Archivo(ArchivoID)
); 

DESCRIBE Archivo;
DESCRIBE APLICANTE;
UPDATE Aplicante SET apto = null, estado_expediente = null, planilla = null, primera_vez = null;
UPDATE Aplicante SET apto = '1', estado_expediente = '2', planilla = '2', primera_vez = '0';

Alter TABLE Aplicante MODIFY Apto CHAR(1);
Alter TABLE Aplicante MODIFY estado_expediente CHAR(1);
Alter TABLE Aplicante MODIFY planilla CHAR(1);
Alter TABLE Aplicante MODIFY primera_vez CHAR(1);


Select * From Personal;
Describe Personal;
Alter Table Personal Modify Estado Char(2) null;
Alter Table Personal Modify Estado Char(1);
UPDATE Personal SET Estado = null;
UPDATE Personal SET Estado = '1';


SELECT ap.CUI, ap.Nombre, p.Nombre, ap.Estado_Expediente FROM Aplicante ap INNER JOIN Depa_Puesto dp ON dp.Depa_Puesto_ID = ap.Depa_Puesto_ID Inner JOin Puesto p ON p.PuestoID = dp.PuestoID WHERE ap.PersonalID = :personal; 

Select r.RequisitoID, r.Nombre, a.ArchivoID, a.Aceptado, a.Ruta FROM Archivo a INNER JOIN Puesto_Requisito pr ON pr.Puesto_Requi_ID = a.Puesto_Requi_ID INNER JOIN Requisito r ON r.RequisitoID = pr.RequisitoID WHERE a.AplicanteCUI = :cui;

SELECT ap.CUI, ap.Nombre, p.Nombre, ap.Estado_Expediente FROM Aplicante ap INNER JOIN Depa_Puesto dp ON dp.Depa_Puesto_ID = ap.Depa_Puesto_ID Inner JOin Puesto p ON p.PuestoID = dp.PuestoID WHERE ap.PersonalID = :personal AND (ap.Nombre = :nombre OR :nombre is null) AND (p.Nombre = :puesto OR :puesto is null) AND (ap.Estado_Expediente = :estado OR :estado is null); 

Select r.RequisitoID, r.Nombre, a.ArchivoID, a.Aceptado, a.Ruta FROM Archivo a INNER JOIN Puesto_Requisito pr ON pr.Puesto_Requi_ID = a.Puesto_Requi_ID INNER JOIN Requisito r ON r.RequisitoID = pr.RequisitoID WHERE a.AplicanteCUI = :cui;

Select Nombre From Personal WHERE PersonalID = :per;

UPDATE Archivo SET Aceptado = :estado WHERE ArchivoID = :id;

Insert INTO Historial(Ruta, Motivo, Fecha_Rechazado, ArchivoID) VALUES (:ruta, :motivo, TO_DATE(:fecha, 'YYYY-MM-DD'), :ArchivoID);

UPDATE Aplicante SET Estado_Expediente = :estado WHERE CUI = :cui;

Select r.Nombre, h.historialid, h.ruta, h.motivo, TO_CHAR(h.Fecha_Rechazado, 'DD/MM/YYYY' ) Fecha_Rechazado From Historial h Inner Join Archivo a ON  a.ArchivoID = h.ArchivoID Inner Join Puesto_Requisito pr ON pr.Puesto_Requi_ID = a.Puesto_Requi_ID Inner Join Requisito r ON r.RequisitoID = pr.requisitoid WHERE a.AplicanteCUI = :cui;

Update Archivo Set Ruta = :ruta, Aceptado = '2' WHERE ArchivoID = :id
Update Aplicante Set Estado_Expediente = '2' WHERE CUI :cui;


SELECT    n.id, n.us, n.correo, NVL(Conteo, 0) as nv
FROM      (Select ap.personalID AS id, count(*) as Conteo from Aplicante ap GROUP BY ap.PersonalID) rn
RIGHT JOIN (Select p.PersonalID as id, p.usuario as us, p.Correo as correo FROM Personal p Inner Join Departamento d ON d.DepaID = p.DepartamentoID AND d.DepaID = :depa Inner Join Rol r ON r.RolID = p.RolID AND r.Nombre = 'Revisor') n ON n.id = rn.id Group BY n.id, n.us, n.correo, rn.id  ORDER BY Conteo ASC FETCH NEXT 1 ROWS ONLY;


SELECT Count(Distinct ap.PersonalID) as Conteo FROM Aplicante ap Group BY ap.CUI;

Insert Into Rol(Nombre) Values ('Coordinador');
Insert Into Rol(Nombre) Values ('Reclutador');
Insert Into Rol(Nombre) Values ('Revisor');
Insert Into Rol(Nombre) Values ('Admin Sistema');
Insert Into Rol(Nombre) Values ('Admin Usuario');
Insert Into Rol(Nombre) Values ('Aplicante');
Insert Into login(Usuario, Contrasenia, RolID) Select 'as', 's', RolID From Rol Where Nombre = 'Admin Sistema';
Insert Into login(Usuario, Contrasenia, RolID) Select 'au', 'u', RolID From Rol Where Nombre = 'Admin Usuario';


SELECT d.CapitalTotal FROM Departamento d WHERE d.DepaID = :depa;
--<
Select Sum(Suma) From (
SELECT Sum(P.Salario) as suma FROM Aplicante ap 
Inner Join Depa_Puesto dp ON dp.Depa_Puesto_ID = ap.Depa_Puesto_ID
Inner Join Departamento d ON dp.DepartamentoID = d.DepaID
Inner Join Puesto p ON p.PuestoID = dp.PuestoID
Where d.DepaID = :depa 
AND ap.Planilla = '1' 
UNION ALL
Select p.salario as suma From Depa_Puesto dp 
Inner Join Puesto p ON p.PuestoID = dp.PuestoID 
Inner Join Departamento d ON d.DepaID = dp.DepartamentoID
WHERE dp.Depa_Puesto_ID = :dp
) t 

Update Aplicante SET Planilla = '1' WHERE Cui = :cui

Update Aplicante SET Planilla = :estado WHERE Cui = :cui

SELECT p.Nombre, ap.Nombre, TO_CHAR(Fecha_Postulacion, 'DD/MM/YYYY' ) Fecha_Postulacion, ap.CUI, ap.Apellido, ap.Correo, ap.Direccion, ap.Telefono, ap.CV, ap.Planilla,
dp.Depa_Puesto_ID 
FROM APLICANTE ap 
Inner Join Depa_Puesto dp ON ap.Depa_Puesto_ID = dp.Depa_Puesto_ID 
AND dp.DepartamentoID = :depa 
Inner Join Puesto p ON p.PuestoID = dp.PuestoID 
Where ap.Estado_Expediente = '1' AND (ap.Planilla = '2' OR ap.Planilla = '0')


SELECT p.Nombre, ap.Nombre, TO_CHAR(Fecha_Postulacion, 'DD/MM/YYYY' ) Fecha_Postulacion, ap.CUI, ap.Apellido, ap.Correo, ap.Direccion, ap.Telefono, ap.CV, ap.Planilla
FROM APLICANTE ap 
Inner Join Depa_Puesto dp ON ap.Depa_Puesto_ID = dp.Depa_Puesto_ID 
AND dp.DepartamentoID = :depa 
Inner Join Puesto p ON p.PuestoID = dp.PuestoID 
Where ap.Estado_Expediente = '1' AND (ap.Planilla = '1' OR ap.Planilla = '3')

Select P.Nombre, P.PersonalID FROM Aplicante ap Inner Join Personal p ON p.PersonalID = ap.PersonalID WHERE ap.Cui = :cui


CREATE OR REPLACE VIEW Aplicante_Planilla(capital, salario, dis, dep, idi) AS 
SELECT d.CapitalTotal, p.salario, d.Capital_Disponible, d.depaid, dp.depa_puesto_id FROM Depa_Puesto dp
Inner Join Departamento d ON d.depaid = dp.departamentoid
Inner Join Puesto p ON p.PuestoID = dp.PuestoID; 


create or replace TRIGGER Asignado_Planilla 
BEFORE UPDATE ON Aplicante 
FOR EACH ROW 
WHEN (new.planilla = '1')
DECLARE
capital_total Number;
sueldo Number;
temp Number;
Depa number;
BEGIN 
    Select capital, salario, dis, dep INTO capital_total, sueldo, temp, depa FROM Aplicante_Planilla 
    WHERE idi = :new.depa_puesto_id;
    
    IF (temp is null) THEN
         Update Departamento SET Capital_Disponible = capital_total - sueldo WHERE depaid = depa;
    ELSE
         Update Departamento SET Capital_Disponible = temp - sueldo WHERE depaid = depa;
    END IF;
END;
/

create or replace TRIGGER Eliminar_Planilla 
BEFORE UPDATE ON Aplicante 
FOR EACH ROW 
WHEN (new.planilla = '3')
DECLARE
sueldo number(10);
temp number(10);
depa number;
BEGIN 
    Select salario, dis, dep INTO sueldo, temp, depa FROM Aplicante_Planilla 
    WHERE idi = :new.depa_puesto_id;

    Update Departamento SET Capital_Disponible = temp + sueldo WHERE depaid = depa;
END;
/

create or replace TRIGGER Nuevo_Aplicante
BEFORE INSERT ON Aplicante
FOR EACH ROW
DECLARE 
pragma autonomous_transaction;
existe   EXCEPTION;
PRAGMA EXCEPTION_INIT (existe, -20001);
contador number;
BEGIN 
    SELECT Count (*) INTO contador FROM Aplicante WHERE cui = :new.cui;
    IF (contador > 0) THEN 
        RAISE existe;
    END IF;
    EXCEPTION
    WHEN existe
    THEN 
    RAISE_Application_error(-20001, 'YA TIENE INVITACION EL CUI ASOCIADO');
END;
/   

--Consulta 1



--Consulta 2 

CREATE OR REPLACE VIEW Planilla(nombre, apellido, Nombre_Dep, id_depa, Nompre_Puesto) AS 
SELECT ap.Nombre, ap.apellido, d.Nombre, d.DepaID, p.Nombre FROM Aplicante ap 
Inner Join Depa_Puesto dp ON ap.Depa_Puesto_ID = dp.Depa_Puesto_ID
Inner Join Departamento d ON d.depaid = dp.departamentoid
Inner Join Puesto p ON p.PuestoID = dp.PuestoID
WHERE ap.Planilla = '1';

CREATE OR REPLACE PROCEDURE Report_2 
(   depa IN Varchar2,
    salida OUT SYS_REFCURSOR
) AS
BEGIN
    IF (depa is null) THEN 
        OPEN salida FOR SELECT * FROM Planilla ;
    ELSE
        OPEN salida FOR SELECT * FROM Planilla WHERE Nombre_Dep = depa;
    END IF;
END;
/
--Consulta 3
CREATE OR REPLACE PROCEDURE Report_3
(   
    salida OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN salida FOR SELECT Nombre_Dep, Count(*) AS Personas FROM Planilla GROUP BY Nombre_Dep ORDER BY Personas DESC FETCH NEXT 5 ROWS ONLY;
END;
/
--Consulta 4 

CREATE OR REPLACE PROCEDURE Report_4
(   
    salida OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN salida FOR SELECT p.Usuario, Count(ap.PersonalID) as invitaciones FROM Personal p 
    INNER JOIN Aplicante ap ON ap.PersonalID = p.PersonalID
    GROUP BY p.Usuario ORDER BY invitaciones DESC FETCH NEXT 5 ROWS ONLY;
END;
/
-- Consulta 5
CREATE OR REPLACE PROCEDURE Report_5
(   
    salida OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN salida FOR SELECT ap.Nombre, ap.Apellido, Count(h.HistorialID) as Rechazados FROM Aplicante ap
    Inner Join Archivo a ON a.AplicanteCUI = ap.CUI 
    Inner Join Historial h ON h.ArchivoID = a.ArchivoID 
    Group BY ap.Nombre, ap.Apellido ORDER BY Rechazados DESC FETCH NEXT 5 ROWS ONLY;
END;
/
-- Consulta 6

CREATE OR REPLACE PROCEDURE Report_6
(   
    salida OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN salida FOR SELECT t.Nombre, t.capital_usada, tn.nombre as puesto, t.max_salario FROM 
    (SELECT d.depaid, d.Nombre, d.CapitalTotal - d.Capital_Disponible AS Capital_Usada, MAX(P.Salario) as max_salario FROM Departamento d 
    Inner Join Depa_Puesto dp ON dp.DepartamentoID = d.DepaID 
    Inner Join Puesto p ON p.PuestoID = dp.PuestoID
    Group BY d.depaid, d.Nombre, d.CapitalTotal, d.Capital_Disponible) t,
    (SELECT d.Depaid, p.Nombre, p.salario FROM Departamento d 
    Inner Join Depa_Puesto dp ON dp.DepartamentoID = d.DepaID 
    Inner Join Puesto p ON p.PuestoID = dp.PuestoID) tn
    WHERE t.depaid = tn.depaid AND t.max_salario = tn.salario;
END;


Select d.Nombre, d.CapitalTotal, d.DepaID From Departamento d ;
Select d.Nombre, d.CapitalTotal, d.DepaID From Departamento d WHERE d.Nombre = :depa; 
 
Select p.Nombre, p.Salario, p.PuestoID FROM Puesto p INNER JOIN Depa_Puesto dp ON dp.PuestoID = p.PuestoID AND dp.DepartamentoID = :depa 

SELECT c.Nombre FROM Categoria c INNER Join Puesto_Cate pc ON pc.CategoriaID = c.CategoriaID AND pc.PuestoID = :puesto;

SELECT r.Nombre, r.RequisitoID FROM Requisito r INNER Join Puesto_Requisito pr ON pr.RequisitoID = r.RequisitoID AND pr.PuestoID = :puesto;

SELECT f.Nombre FROM Formato f INNER Join Requisito_Formato rf ON rf.FormatoID = f.FormatoID AND rf.RequisitoID = :requisito


