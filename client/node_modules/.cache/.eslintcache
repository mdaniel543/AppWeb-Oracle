[{"/home/daniel/Escritorio/MIA-Proyecto2/client/src/index.js":"1","/home/daniel/Escritorio/MIA-Proyecto2/client/src/App.js":"2","/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/guest.js":"3","/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/login.js":"4","/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/Auser.js":"5","/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/Asys.js":"6","/home/daniel/Escritorio/MIA-Proyecto2/client/src/utils/date.js":"7"},{"size":192,"mtime":1634671114320,"results":"8","hashOfConfig":"9"},{"size":639,"mtime":1634671114320,"results":"10","hashOfConfig":"9"},{"size":9695,"mtime":1634673563262,"results":"11","hashOfConfig":"9"},{"size":2722,"mtime":1634439771483,"results":"12","hashOfConfig":"9"},{"size":11244,"mtime":1634670249856,"results":"13","hashOfConfig":"9"},{"size":2727,"mtime":1634669967873,"results":"14","hashOfConfig":"9"},{"size":220,"mtime":1634514982882,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1393peg",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/daniel/Escritorio/MIA-Proyecto2/client/src/index.js",[],["32","33"],"/home/daniel/Escritorio/MIA-Proyecto2/client/src/App.js",[],"/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/guest.js",["34","35","36","37"],"/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/login.js",[],"/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/Auser.js",["38"],"import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport {getCurrentDate} from '../utils/date'\n\nimport {\n    Table,\n    Button,\n    Container,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    FormGroup,\n    ModalFooter\n} from \"reactstrap\";\n\nclass AdminUser extends Component{\n    constructor() {\n        super();\n        this.state = {\n            modalActualizar: false,\n            modalInsertar: false,\n            tasks: [],\n            data :{\n                id: '',\n                user: '',\n                pass: '',\n                estado: '',\n                inicio: '',\n                fin: '',\n                rol: '',\n                depa: ''\n            },\n            rols: [\"Coordinador\", \"Reclutador\", \"Revisor\"], \n            depas: [],\n            date : getCurrentDate()\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleChangeR = this.handleChangeR.bind(this);\n        this.handleChangeD = this.handleChangeD.bind(this);\n        this.fetchTasks();\n        this.fetchdepa();\n    }\n    fetchTasks() {\n        fetch('/selectU')\n          .then(res => res.json())\n          .then(data => {\n            console.log(data)\n            this.setState({tasks: data});\n          });\n    }\n    fetchdepa() {\n        fetch('/depas')\n          .then(res => res.json())\n          .then(data => {\n            const aux = [];\n            for(const i of data){\n                aux.push(i.nombre)    \n            }\n            this.setState({depas: aux});\n        });\n    }\n\n\n    mostrarModalInsertar(){\n        this.setState({modalInsertar: true})\n    }\n    cerrarModalInsertar(){\n        this.setState({modalInsertar: false})\n        this.fetchTasks();\n    }\n    mostrarModalActualizar(dato){\n        this.setState({\n            data : dato,\n            modalActualizar: true\n        })\n    }\n    cerrarModalActualizar(){\n        this.setState({modalActualizar: false})\n    }\n\n    editar(dato){\n        console.log(this.state.data)\n        fetch('/updateU', {\n            method: 'PUT',\n            body: JSON.stringify({\n                idP: dato.id,\n                usuario: dato.user,\n                pass: dato.pass,\n                rol: dato.rol,\n                depa: dato.depa\n            }),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n            })\n            .then(res => res.json())\n            .then(data => {\n                window.alert(data.msg);\n                this.fetchTasks();\n            })\n            .catch(err => console.error(err));\n        this.cerrarModalActualizar();\n        this.fetchTasks();\n    }\n    eliminar(dato){\n        console.log(this.state.data)\n        fetch('/deleteU', {\n            method: 'PUT',\n            body: JSON.stringify({\n                idP: dato.id,\n                fin: this.state.date\n            }),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n            })\n            .then(res => res.json())\n            .then(data => {\n                window.alert(data.msg);\n                this.fetchTasks();\n            })\n            .catch(err => console.error(err));\n        this.fetchTasks();\n    }\n    insertar(){\n        console.log(this.state.data)\n        fetch('/insertU', {\n            method: 'POST',\n            body: JSON.stringify({\n                usuario: this.state.data.user,\n                pass: this.state.data.pass,\n                inicio: this.state.date,\n                rol: this.state.data.rol,\n                depa:this.state.data.depa\n            }),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n            })\n            .then(res => res.json())\n            .then(data => {\n                window.alert(data.msg);\n                this.fetchTasks();\n            })\n            .catch(err => console.error(err));\n        this.cerrarModalInsertar()\n        this.fetchTasks();\n    }\n\n    handleChange(e) {\n        const { name, value } = e.target;\n        this.setState({\n          data:{\n              ...this.state.data,\n              [name]: value\n          },\n        });\n    }\n\n    handleChangeR(e) {\n        this.setState({\n          data:{\n              ...this.state.data,\n              rol: e.value\n          },\n        });\n    }\n    handleChangeD(e) {\n        this.setState({\n          data:{\n              ...this.state.data,\n              depa: e.value\n          },\n        });\n    }\n\n    cerrarSesion=()=>{\n        window.location.href='./';\n    }\n\n    render (){\n        return(\n            <div className=\"crud\">\n            <nav role=\"navigation\">\n            <div id=\"menuToggle\">\n            <input type=\"checkbox\"/>\n            <span></span>\n            <span></span>\n            <span></span>\n            <ul id=\"menu\">\n            <button onClick={()=>this.cerrarSesion()}><li>Cerrar Sesion</li></button>\n            </ul>\n            </div>\n            </nav>\n            <div className='xml'>\n            <h1>Usuarios</h1>\n            </div>\n            <Container>\n            <br />\n            <Button color=\"primary\" onClick={()=>this.mostrarModalInsertar()}>Crear Usuario</Button>\n            <br />\n            <br />\n            <Table>\n                <thead>\n                <tr>\n                    <th>Usuario</th>\n                    <th>Contrase√±a</th>\n                    <th>Fecha Inicio</th>\n                    <th>Fecha Fin</th>\n                    <th>Rol</th>\n                    <th>Departamento</th>\n                </tr>\n                </thead>\n                \n                {this.state.tasks.map((dato) => (\n                    (() => {\n                        if(dato.estado == 1){\n                            return <Ifyes dato = {dato} this= {this}/>\n                        }else{\n                            return <Elsen dato = {dato} this = {this}/>\n                        }\n                    })()\n                ))}\n               \n            </Table>\n            </Container>\n            \n            <Modal isOpen={this.state.modalInsertar} fade={false}>\n            <ModalHeader>\n            <div><h3>Insertar Usuario</h3></div>\n            </ModalHeader>\n            <ModalBody>\n                <FormGroup>\n                <label>\n                    Usuario: \n                </label>\n                <input\n                    className=\"form-control\"\n                    name=\"user\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                />\n                </FormGroup>\n                <FormGroup>\n                <label>\n                    password: \n                </label>\n                <input\n                    className=\"form-control\"\n                    name=\"pass\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                />\n                </FormGroup>\n                <FormGroup>\n                <label>\n                    Rol\n                </label>\n                <Dropdown name = \"rol\" options={this.state.rols} onChange={this.handleChangeR} placeholder=\"Selecciona Rol\" />\n                </FormGroup>\n                <FormGroup>\n                <label>\n                    Departamento\n                </label>\n                <Dropdown name = \"depa\" options={this.state.depas} onChange={this.handleChangeD} placeholder=\"Selecciona Departamento\" />\n                </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                color=\"primary\"\n                onClick={() => this.insertar()}\n                >\n                Insertar\n                </Button>\n                <Button\n                className=\"btn btn-danger\"\n                onClick={() => this.cerrarModalInsertar()}\n                >\n                Cancelar\n                </Button>\n            </ModalFooter>\n            </Modal>\n\n            <Modal isOpen={this.state.modalActualizar} fade={false}>\n            <ModalHeader>\n            <div><h3>Editar Usuario</h3></div>\n            </ModalHeader>\n            <ModalBody>\n                <FormGroup>\n                <label>\n                    Usuario: \n                </label>\n                <input\n                    className=\"form-control\"\n                    name=\"user\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                    value={this.state.data.user}\n                />\n                </FormGroup>\n                <FormGroup>\n                <label>\n                    Contrase√±a: \n                </label>\n                <input\n                    className=\"form-control\"\n                    name=\"pass\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                    value={this.state.data.pass}\n                />\n                </FormGroup>\n                <FormGroup>\n                <label>\n                    Rol\n                </label>\n                <Dropdown name = \"rol\" options={this.state.rols} onChange={this.handleChangeR} value={this.state.data.rol} placeholder=\"Selecciona Rol\" />\n                </FormGroup>\n                <FormGroup>\n                <label>\n                    Departamento\n                </label>\n                <Dropdown name = \"depa\" options={this.state.depas} onChange={this.handleChangeD} value={this.state.data.depa} placeholder=\"Selecciona Departamento\" />\n                </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                color=\"primary\"\n                onClick={() => this.editar(this.state.data)}\n                >\n                Editar\n                </Button>\n                <Button\n                color=\"danger\"\n                onClick={() => this.cerrarModalActualizar()}\n                >\n                Cancelar\n                </Button>\n            </ModalFooter>\n            </Modal>           \n        </div>\n        );\n    }\n}\n\nfunction Ifyes(props) {\n    var dato = props.dato;\n    return(\n        <tbody style={{backgroundColor : \"#81C784\"}}>\n        <tr key={dato.id} >\n        <td>{dato.user}</td>\n        <td>{dato.pass}</td>\n        <td>{dato.inicio}</td>\n        <td>{dato.fin}</td>\n        <td>{dato.rol}</td>\n        <td>{dato.depa}</td>\n        <td>\n            <Button\n            color=\"primary\"\n            onClick={() => props.this.mostrarModalActualizar(dato)}\n            >\n            Editar\n            </Button>{\" \"}\n            <Button color=\"danger\" onClick={()=> props.this.eliminar(dato)}>Eliminar</Button>\n        </td>\n        </tr>\n        </tbody>\n    );    \n}\n\nfunction Elsen(props) {\n    var dato = props.dato;\n    return(\n        <tbody style={{backgroundColor : \"#F44336\"}}>\n        <tr key={dato.id}>\n        <td>{dato.user}</td>\n        <td>{dato.pass}</td>\n        <td>{dato.inicio}</td>\n        <td>{dato.fin}</td>\n        <td>{dato.rol}</td>\n        <td>{dato.depa}</td>\n        </tr>\n        </tbody>\n    );\n}\n\n\n\n\nexport default AdminUser;","/home/daniel/Escritorio/MIA-Proyecto2/client/src/components/Asys.js",[],"/home/daniel/Escritorio/MIA-Proyecto2/client/src/utils/date.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":9,"column":5,"nodeType":"45","messageId":"46","endLine":9,"endColumn":10},{"ruleId":"43","severity":1,"message":"47","line":11,"column":5,"nodeType":"45","messageId":"46","endLine":11,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":117,"column":9,"nodeType":"50","endLine":117,"endColumn":58},{"ruleId":"48","severity":1,"message":"49","line":144,"column":9,"nodeType":"50","endLine":144,"endColumn":65},{"ruleId":"51","severity":1,"message":"52","line":222,"column":40,"nodeType":"53","messageId":"54","endLine":222,"endColumn":42},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]